{"name": "test_home", "status": "broken", "statusDetails": {"message": "base.verify.NotFoundElementError", "trace": "self = <base.action.ElementActions object at 0x10b3e24f0>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '特卖首页', 'switch': None, ...}, is_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n>               WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/action.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c2a8c51a-36ab-4af3-9917-a0b8a1079201\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x10b406ca0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_demo.Test_demo object at 0x10b3c5cd0>, action = <base.action.ElementActions object at 0x10b3e24f0>\n\n>   ???\n\n/Users/likunyu/project/521-uiautomation/tests/test_suit/test_demo.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/action.py:306: in click\n    element = self._find_element(locator, wait=wait)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.action.ElementActions object at 0x10b3e24f0>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '特卖首页', 'switch': None, ...}, is_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n    \n            waittime_count.end()\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n    \n            if is_raise == True:\n                log.error(\n                    \"【{}】页面中未能找到元素【{}】\\n locator: \\n {}\".format(locator.get(\"page\"), locator.get(\"name\"), locator))\n>               raise NotFoundElementError\nE               base.verify.NotFoundElementError\n\nbase/action.py:547: NotFoundElementError"}, "attachments": [{"name": "log", "source": "507cc15f-4cf5-444b-b36e-ac1982998e78-attachment.txt", "type": "text/plain"}], "start": 1653723581298, "stop": 1653723588929, "uuid": "3213e0fe-47b7-49f8-a3d7-7f85581e7801", "historyId": "8703fc87421ad99165ee4ec93acfc2d5", "testCaseId": "8873318ec9607218d2fb9de27c05c060", "fullName": "tests.2test_suit.test_demo.Test_demo#test_home", "labels": [{"name": "parentSuite", "value": "tests.2test_suit"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "192.168.1.4"}, {"name": "thread", "value": "52586-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.2test_suit.test_demo"}]}