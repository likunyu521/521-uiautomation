{"name": "test_home", "status": "broken", "statusDetails": {"message": "base.verify.NotFoundElementError", "trace": "self = <base.action.ElementActions object at 0x10edc1760>, locator = {'dynamic': False, 'name': '找能量', 'page': '我的树页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n>               WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/action.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2deacd52-034f-4d0a-9ff0-682fe0365375\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x10ed53700>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_zhifubao.test_plant_trees.Test_demo object at 0x10ed99310>, action = <base.action.ElementActions object at 0x10edc1760>\n\n    def test_home(self, action: ElementActions):\n        action.click(PlantTreePages.plant_tree_home_page.plant_tree_entrance)\n        # 点击找能量\n        print(\"收集自己能量\")\n        action.tap(PlantTreePages.my_tree_page.energy_positon)\n        action.sleep(3)\n    \n        # 找能量按钮点击\n>       action.click(PlantTreePages.my_tree_page.find_energy_button)\n\ntests/test_zhifubao/test_plant_trees.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/action.py:306: in click\n    element = self._find_element(locator, wait=wait)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.action.ElementActions object at 0x10edc1760>, locator = {'dynamic': False, 'name': '找能量', 'page': '我的树页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n    \n            waittime_count.end()\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n    \n            if is_raise == True:\n                log.error(\n                    \"【{}】页面中未能找到元素【{}】\\n locator: \\n {}\".format(locator.get(\"page\"), locator.get(\"name\"), locator))\n>               raise NotFoundElementError\nE               base.verify.NotFoundElementError\n\nbase/action.py:547: NotFoundElementError"}, "attachments": [{"name": "log", "source": "7b6ff017-b005-4c6e-82da-4c8a3cf6a900-attachment.txt", "type": "text/plain"}], "start": 1653732961340, "stop": 1653732979173, "uuid": "64abf907-399e-4f72-9e3a-62d71198831e", "historyId": "05735c7eb927ae866531a3f645dc3719", "testCaseId": "bde7cbda17cc31dca8af7144ff319a69", "fullName": "tests.test_zhifubao.test_plant_trees.Test_demo#test_home", "labels": [{"name": "parentSuite", "value": "tests.test_zhifubao"}, {"name": "suite", "value": "test_plant_trees"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "192.168.1.4"}, {"name": "thread", "value": "56785-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_zhifubao.test_plant_trees"}]}