{"name": "test_case1", "status": "broken", "statusDetails": {"message": "base.verify.NotFoundElementError", "trace": "self = <base.action.ElementActions object at 0x10b6482b0>, locator = {'dynamic': False, 'name': '发布', 'page': '视频发布页', 'switch': None, ...}, is_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True,wait = 5,is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count=Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"),locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n>                   lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/action.py:575: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b17d099b-7483-4133-9ec0-f097c4b9c2d7\")>, method = <function ElementActions._find_element.<locals>.<lambda> at 0x10b7746a8>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_vedio.test_videorelease.Test_videorelease object at 0x10b653278>, action = <base.action.ElementActions object at 0x10b6482b0>\n\n    def test_case1(self,action):\n        count=5\n        action.click(p.特卖首页.发布)\n    \n        for index in range(count):\n>           action.click(vp.视频发布页.视频发布)\n\ntests/test_vedio/test_videorelease.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase/action.py:329: in click\n    element = self._find_element(locator,wait=wait)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.action.ElementActions object at 0x10b6482b0>, locator = {'dynamic': False, 'name': '发布', 'page': '视频发布页', 'switch': None, ...}, is_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True,wait = 5,is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count=Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"),locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n    \n            waittime_count.end()\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n    \n            if is_raise==True:\n                log.error(\n                    \"【{}】页面中未能找到元素【{}】\\n locator: \\n {}\".format(locator.get(\"page\"), locator.get(\"name\"), locator))\n>               raise NotFoundElementError\nE               base.verify.NotFoundElementError\n\nbase/action.py:587: NotFoundElementError"}, "attachments": [{"name": "log", "source": "543b24cf-ea3b-4ecf-b1ba-f5e4eaebf854-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "3502b925-0d38-4e4f-b528-038c9bc3cd66-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "da44832c-0a1a-4e54-aab3-88269f1306ff-attachment.txt", "type": "text/plain"}], "start": 1546842463044, "stop": 1546842470808, "uuid": "dcd5be3e-4d73-4b38-b2be-d28593a64d8f", "historyId": "61d0ec5868142760393bb75a0ddaae70", "fullName": "tests.test_vedio.test_videorelease.Test_videorelease#test_case1", "labels": [{"name": "parentSuite", "value": "tests.test_vedio"}, {"name": "suite", "value": "test_videorelease"}, {"name": "subSuite", "value": "Test_videorelease"}, {"name": "host", "value": "tangmaoheng-deMacBook-Air.local"}, {"name": "thread", "value": "15102-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_vedio.test_videorelease"}]}