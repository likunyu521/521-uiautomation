{"name": "test_home", "status": "broken", "statusDetails": {"message": "base.verify.NotFoundElementError", "trace": "self = <base.action.ElementActions object at 0x10efea490>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '分类列表搜索页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True,wait = 5,is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count=Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"),locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n>               WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/action.py:574: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b295795d-e1ff-41f2-b227-e035dccebf95\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x10efe4e50>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_suit2.test_demo2.Test_demo object at 0x10efb3190>\naction = <base.action.ElementActions object at 0x10efea490>\n\n    def test_home(self, action: ElementActions):\n    \n        # up.登录页.login(action,'13550234762','tmhrush2233')\n    \n    \n        action.click(p.特卖首页.搜索输入框)\n    \n        #因为调用action的大部分公用方法是返回self，所以可以一条语句执行多次不同方法\n>       action.text(p.分类列表搜索页.搜索输入框,\"口红\")\\\n            .click(p.分类列表搜索页.搜索按钮)\n\ntests/test_suit2/test_demo2.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/action.py:402: in text\n    element=self._find_element(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.action.ElementActions object at 0x10efea490>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '分类列表搜索页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True,wait = 5,is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count=Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"),locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n    \n            waittime_count.end()\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n    \n            if is_raise==True:\n                log.error(\n                    \"【{}】页面中未能找到元素【{}】\\n locator: \\n {}\".format(locator.get(\"page\"), locator.get(\"name\"), locator))\n>               raise NotFoundElementError\nE               base.verify.NotFoundElementError\n\nbase/action.py:587: NotFoundElementError"}, "attachments": [{"name": "log", "source": "338c2784-8e50-4117-9281-d1b1f8750556-attachment.txt", "type": "text/plain"}], "start": 1647948282208, "stop": 1647948288200, "uuid": "649cc9f4-cea0-412b-8fd2-06a7fd5e033f", "historyId": "664876ab20be2b5ad5a0349406424ad4", "testCaseId": "4a4a52bbe4a9b65ef68e26d253501f62", "fullName": "tests.test_suit2.test_demo2.Test_demo#test_home", "labels": [{"name": "parentSuite", "value": "tests.test_suit2"}, {"name": "suite", "value": "test_demo2"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "bogon"}, {"name": "thread", "value": "42797-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_suit2.test_demo2"}]}